#include "structures.fxh"

#ifdef DISABLE_TEXTURE
cbuffer Material {
    ShaderMaterial material;
};
#else
Texture2D    texBase;
SamplerState texBaseSampler;
#endif

cbuffer Camera {
    ShaderCamera camera;
};

struct PSInput {
    float4 position : SV_POSITION;
    float3 normal   : NORMAL;
    float2 uv       : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};


/*
	toLightDirection - from camera position to light
	toEyeDirection - reverse for camera.vecViewDirection
*/
float3 PhongLighting(float3 normal, float3 toLightDirection, float3 toEyeDirection, float3 baseColor) {
	// rgb - цвет источника света, a - ambient интенсивность
	const float4 uLightColor = float4(1, 1, 1, 0.7);
	// uShininess > 0
	const float uShininess = 1000.0;

	float cosNL = dot(normal, toLightDirection);
	float3 reflection = 2.0f * normal * cosNL - toLightDirection;
	float cosRV = max(0, dot(reflection, toEyeDirection));
	float powSpecular = pow(cosRV, uShininess);

	// Ambient = baseColor * uLightColor.a * uLightColor.rgb
	// Diffuse = baseColor * cosNL * uLightColor.rgb
	// Specular = powSpecular * uLightColor.rgb
	float3 color = (baseColor * (uLightColor.a + cosNL) + powSpecular) * uLightColor.rgb;

	return min(color, float3(1));
}

#ifdef DISABLE_TEXTURE
float4 GetBaseColor(in PSInput psIn) {
    return material.crlBase;
}
#else
float4 GetBaseColor(in PSInput psIn) {
    return texBase.Sample(texBaseSampler, psIn.uv);
}
#endif

void main(in PSInput psIn, out PSOutput psOut) {
    float3 normal = normalize(psIn.normal);
	const float3 toLightDirection = float3(0, 1, 0);
	float3 toEyeDirection = -camera.vecViewDirection.xyz;
	float3 baseColor = GetBaseColor(psIn).rgb;

	float3 resultColor = PhongLighting(normal, toLightDirection, toEyeDirection, baseColor);
	psOut.Color = float4(resultColor, 1);
}
