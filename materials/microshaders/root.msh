name: ""
group: ""
root: true
pixel {
    parameters: {
        inputs: {
            position: [float4, SV_POSITION],
            normal: [float3, NORMAL],
            uv: [float2, TEX_COORD]
        }
    }
    source: <<SHADER
struct PSOutput {
    float4 Color : SV_TARGET;
};

void main(in PSInput psIn, out PSOutput psOut) {
    float4 baseColor = GetBaseColor(psIn);
    AlphaTest(baseColor.a);
    float3 abientDiffuse = LightAmbientDiffuse(psIn, baseColor.rgb);
    float3 specular = LightSpecular(psIn, baseColor.rgb);

    psOut.Color = float4(abientDiffuse + specular, 1.0);
}
SHADER
}
vertex {
    parameters: {
        cbuffers: ["camera"]
        includes: ["structures.fxh"]
    }
    source: <<SHADER
struct VSInput {
    float3 position : ATTRIB0;
    float3 normal   : ATTRIB1;
    float2 uv       : ATTRIB2;

    // Instance attributes
    float4 WorldRow0 : ATTRIB3;
    float4 WorldRow1 : ATTRIB4;
    float4 WorldRow2 : ATTRIB5;
    float4 WorldRow3 : ATTRIB6;
    float3 NormalRow0 : ATTRIB7;
    float3 NormalRow1 : ATTRIB8;
    float3 NormalRow2 : ATTRIB9;
};

struct PSInput {
    float4 position : SV_POSITION;
    float3 normal   : NORMAL;
    float2 uv       : TEX_COORD;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be indentical.
void main(in  VSInput vsIn, out PSInput psIn) {
    // HLSL matrices are row-major while GLSL matrices are column-major. We will
    // use convenience function MatrixFromRows() appropriately defined by the engine
    float4x4 matWorld = MatrixFromRows(vsIn.WorldRow0, vsIn.WorldRow1, vsIn.WorldRow2, vsIn.WorldRow3);
    float3x3 matNormal = MatrixFromRows(vsIn.NormalRow0, vsIn.NormalRow1, vsIn.NormalRow2);

    psIn.position = mul(camera.matViewProj, mul(float4(vsIn.position,1.0), matWorld));
    psIn.normal = mul(vsIn.normal, matNormal);
    psIn.uv = vsIn.uv;
}
SHADER
}
